################################################################################
# Options

# use a better colorscheme
colorscheme github

set global tabstop 2
set global indentwidth 2

# use spaces instead of tabs
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'
hook global InsertChar \t %{ try %{
  execute-keys -draft h %opt{indentwidth}@
} }

# allways remove trailing whitespace
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# add relative line numbers
#hook global WinCreate .* %{ add-highlighter window number-lines -relative }

# use ripgrep as regex search tool
set global grepcmd 'rg --column'

alias global qa kill

################################################################################
# load plugins

evaluate-commands %sh{
  autoload_directory() {
    find -L "$1" -maxdepth 3 -type f -name '*\.kak' \
      -exec printf 'try %%{ source "%s" } catch %%{ echo -debug Autoload: could not load "%s" }\n' '{}' '{}' \;
  }

  autoload_directory ${kak_config}/filetypes/

  autoload_directory ${kak_config}/plugins/
}

################################################################################
# Plugin configuration

# gdb
set-option global gdb_location_symbol "->"

hook global GlobalSetOption gdb_started=true %{
  map global normal <F10>   ': gdb-next<ret>'
  map global normal <F11>   ': gdb-step<ret>'
  map global normal <s-F11> ': gdb-finish<ret>'
  map global normal <F12>   ': gdb-print<ret>'
  map global normal <F9>    ': gdb-toggle-breakpoint<ret>'
  map global normal <F5>    ': gdb-continue<ret>'
}
hook global GlobalSetOption gdb_started=false %{
  unmap global normal <F10>   ': gdb-next<ret>'
  unmap global normal <F11>   ': gdb-step<ret>'
  unmap global normal <s-F11> ': gdb-finish<ret>'
  unmap global normal <F12>   ': gdb-print<ret>'
  unmap global normal <F9>    ': gdb-toggle-breakpoint<ret>'
  unmap global normal <F5>    ': gdb-continue<ret>'
}

#fzf
source "%val{config}/plugins/fzf/rc/fzf-modules/fzf-buffer.kak"
source "%val{config}/plugins/fzf/rc/fzf-modules/fzf-cd.kak"
source "%val{config}/plugins/fzf/rc/fzf-modules/fzf-file.kak"
source "%val{config}/plugins/fzf/rc/fzf-modules/fzf-search.kak"
source "%val{config}/plugins/fzf/rc/fzf-modules/fzf-vcs.kak"
source "%val{config}/plugins/fzf/rc/fzf-modules/VCS/fzf-git.kak"

set-option global fzf_file_command 'rg'

map global normal <c-p> ': fzf-mode<ret>'

################################################################################
# Mappings

# Setup vertical selection mappings
map -docstring "select pattern down" global user v :select-down<ret>
map -docstring "select pattern up" global user <a-v> :select-up<ret>
map -docstring "select both directions" global user V :select-vertically<ret>

map -docstring "Send selection to repl window" global user s <esc>:send-text<ret>
map -docstring "Load your kakrc" global user R <esc>:source<space>~/.config/kak/kakrc<ret>

# clipboard interaction
map global user p -docstring 'paste (after) from clipboard' '!xclip -o -selection clipboard<ret>'
map global user P -docstring 'paste (before) from clipboard' '<a-!>xclip -o -selection clipboard<ret>'
map global user y -docstring 'copy to clipboard' '<a-|>xclip -i -selection clipboard<ret>; :echo "copied selection to X11 clipboard"<ret>'
map global user r -docstring 'replace from clipboard' '|xclip -i -selection clipboard<ret>; xclip -o -selection clipboard<ret>'

# Window and View manipualtion
map global normal <c-w> V
map -docstring "open new window" global view n <esc>:new<ret>
map -docstring "close current window" global view c <esc>:quit<ret>

# Goto bindings
map -docstring "Your kakrc" global goto K <esc>:edit!<space>~/.config/kak/kakrc<ret>

# vim like replace mode
map global normal <c-r> ':<space>replace<ret>'

# toggle case on ~
map global normal ~ <a-`>

# Select xml object tags with object selection
map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

################################################################################
# Highlight the word under the cursor

#declare-option -hidden regex curword
#set-face global CurWord default,rgb:4a4a4a
#
#hook global NormalIdle .* %{
#  eval -draft %{ try %{
#    exec <space><a-i>w <a-k>\A\w+\z<ret>
#    set-option buffer curword "\b\Q%val{selection}\E\b"
#  } catch %{
#    set-option buffer curword ''
#  } }
#}
#add-highlighter global/ dynregex '%opt{curword}' 0:CurWord

################################################################################
# Helper commands

define-command ide %{
  rename-client main
  set-option global jumpclient main

  new rename-client tools
  set-option global toolsclient tools

  new rename-client docs
  set-option global docsclient docs
}

################################################################################
# Automatic settings for filetypes

# Enable language server
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable

map global normal <c-l> ': enter-user-mode lsp<ret>'

set global lsp_insert_spaces true
set global lsp_tab_size 2

#hook global WinSetOption filetype=(c|cpp) %{
#  clang-enable-autocomplete; clang-enable-diagnostics;
#
#  # set clang include path
#  evaluate-commands %sh{
#    git_root=`git rev-parse --show-toplevel`
#    # TODO Add all subdirs of dependencies
#    printf 'set buffer clang_options "-I. -I%s/software/include";' "${git_root}"
#  }
#}

hook global WinSetOption filetype=(c|cpp) %{
  #hook window BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=python %{
  set buffer tabstop 4
  set buffer indentwidth 4
  set buffer lsp_insert_spaces false
  set buffer lsp_tab_size 4
  hook window BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=rust %{
  rust-enable-autocomplete
  hook window BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=(asciidoc|markdown) %{
  set window autowrap_column 80
  autowrap-enable
}
